trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  SUBSCRIPTION_NAME: asc
  tf_state_rg: OlhaBuchynska
  tf_state_location: westeurope
  tf_state_sa_name: sagitopstask9
  tf_state_container_name: tfstatetask9
  tf_environment: terraform
  ACR_NAME: "olhabuchynskacr"
  ACR_SERVER: "olhabuchynskacr.azurecr.io"
  IMAGE_NAME: "myapp"
  IMAGE_TAG: "v1"
  DOCKERFILE_PATH: "docker"
  AKS_NAME: "gitops-k8s" #terraform->variables.tf
  AKS_NAMESPACE: "argocd" #terraform->variables.tf
  APP_NAMESPACE: "myapp"
  acr-connection: "acr-connection4"

stages:
  # - stage: Terraform_Deployment
  #   displayName: "Deploy Infrastructure with Terraform"
  #   jobs:
  #     - job: Terraform_Deployment
  #       pool:
  #         name: "self-hosted"
  #       continueOnError: false

  #       steps:
  #         - task: TerraformInstaller@1
  #           inputs:
  #             terraformVersion: "latest"

  #         - task: AzureCLI@2
  #           displayName: "Create/Check the Terraform Statefile Azure Storage Account"
  #           inputs:
  #             azureSubscription: "$(SUBSCRIPTION_NAME)"
  #             addSpnToEnvironment: true
  #             scriptType: "bash"
  #             scriptLocation: "inlineScript"
  #             inlineScript: |
  #               az group create --name $(tf_state_rg) --location $(tf_state_location)
  #               az storage account create --resource-group $(tf_state_rg) --name $(tf_state_sa_name) --sku Standard_GRS --encryption-services blob
  #               export ACCOUNT_KEY=$(az storage account keys list --resource-group $(tf_state_rg) --account-name $(tf_state_sa_name) --query [0].value -o tsv)
  #               az storage container create --name $(tf_state_container_name) --account-name $(tf_state_sa_name) --account-key $ACCOUNT_KEY
  #               echo "##vso[task.setvariable variable=tf_state_sa_key]$ACCOUNT_KEY"

  #         - task: TerraformTaskV4@4
  #           displayName: "Terraform init"
  #           inputs:
  #             provider: "azurerm"
  #             command: "init"
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
  #             backendServiceArm: "asc"
  #             backendAzureRmResourceGroupName: $(tf_state_rg)
  #             backendAzureRmStorageAccountName: $(tf_state_sa_name)
  #             backendAzureRmContainerName: $(tf_state_container_name)
  #             backendAzureRmKey: "terraform/terraform.tfstate"

  #         - task: TerraformTaskV4@4
  #           displayName: "Terraform validate"
  #           inputs:
  #             provider: "azurerm"
  #             command: "validate"
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"

  #         - task: TerraformTaskV4@4
  #           displayName: "Terraform apply"
  #           inputs:
  #             provider: "azurerm"
  #             command: "apply"
  #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
  #             environmentServiceNameAzureRM: $(SUBSCRIPTION_NAME)

  ############# add Public IP of ingress to DNS for argocd ############
  ############ change path in healthcheck to /healthz ################
  ########### az aks show --resource-group OlhaBuchynska --name gitops-k8s --query "identity.principalId" -o tsv#######
  ########## az role assignment create --assignee ID_from_previous_step --role "Key Vault Secrets User" --scope /subscriptions/9a6ae428-d8c3-44fe-bdf2-4e08593901a0/resourceGroups/OlhaBuchynska/providers/Microsoft.KeyVault/vaults/olhabuchynskavault ######
  #############rescreate acr-connection service-connection for acr###########

  # - stage: Docker_Image
  #   displayName: "Docker image build and push"
  #   jobs:
  #     - job: Docker
  #       pool:
  #         name: "self-hosted"
  #       steps:
  #         - task: Docker@2
  #           displayName: "Login to Azure Container Registry"
  #           inputs:
  #             command: "login"
  #             containerRegistry: "$(acr-connection)"

  #         - task: Docker@2
  #           displayName: "Build Docker Image"
  #           inputs:
  #             command: "build"
  #             Dockerfile: "$(DOCKERFILE_PATH)/Dockerfile"
  #             buildContext: "$(DOCKERFILE_PATH)"
  #             repository: "$(IMAGE_NAME)"
  #             tags: "$(IMAGE_TAG)"

  #         - task: Docker@2
  #           displayName: "Push Docker Image to ACR"
  #           inputs:
  #             command: "push"
  #             repository: "$(IMAGE_NAME)"
  #             tags: "$(IMAGE_TAG)"

  ############ helm upgrade argocd argo/argo-cd -n argocd -f values.yaml ###########################
  ############ az aks update -g OlhaBuchynska -n gitops-k8s --attach-acr olhabuchynskacr ###########
  ############ az aks get-credentials --resource-group OlhaBuchynska --name gitops-k8s  #############
  ############  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d #########
  ############ helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts #########
  ########### helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --namespace kube-system  #########

  - stage: Helm_Deploy
    displayName: "Deploying recource by helm"
    jobs:
      - job: Helm_deployment
        pool:
          name: "self-hosted"
        steps:
          - task: HelmDeploy@1
            displayName: "Deploying helm chart"
            inputs:
              connectionType: "Azure Resource Manager"
              azureSubscription: "$(SUBSCRIPTION_NAME)"
              azureResourceGroup: $(tf_state_rg)
              kubernetesCluster: $(AKS_NAME)
              namespace: $(APP_NAMESPACE)
              command: "install"
              chartType: "FilePath"
              chartPath: "myapp-helm/"
              arguments: "-n $(APP_NAMESPACE)"
              azureContainerRegistry: "$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG)"
